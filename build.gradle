plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'jacoco'
}

javafx {
    version = "15.0.1"
    modules = ['javafx.controls', 'javafx.fxml']
}

jacoco {
    toolVersion = "0.8.6"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = 'net.atlassian.libraryapp1'
version = '0.1.0-SNAPSHOT'
description = 'A simple registration example using Java 15+, JavaFX, Maven / Gradle and saving users in Nitrite Java (with encoded passwords).'

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
    implementation 'org.openjfx:javafx-controls:15.0.1'
    implementation 'org.openjfx:javafx-fxml:15.0.1'
    implementation 'org.dizitart:nitrite:3.4.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.1'
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'

    testCompile 'org.testfx:testfx-core:4.0.16-alpha'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
    testCompile 'org.testfx:testfx-junit5:4.0.16-alpha'

    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
    testCompile group: 'commons-io', name: 'commons-io', version: '2.8.0'
}

mainClassName = 'net.atlassian.libraryapp1.Main'

test {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination layout.buildDirectory.dir('jacocoHtml').get().asFile
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

test {
    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    }
}

test {
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}